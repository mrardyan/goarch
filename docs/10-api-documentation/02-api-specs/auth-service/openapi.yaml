openapi: 3.0.0
info:
  title: Authentication Service API
  version: 1.0.0
  description: API for user authentication and authorization
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server
  - url: http://localhost:8080/v1
    description: Development server

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              basic:
                summary: Basic registration
                value:
                  email: "user@example.com"
                  password: "SecurePass123!"
                  first_name: "John"
                  last_name: "Doe"
                  phone: "+1234567890"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: Authenticate user
      description: Login with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              basic:
                summary: Basic login
                value:
                  email: "user@example.com"
                  password: "SecurePass123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: Logout user
      description: Invalidate current token
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Get new access token using refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password:
    post:
      summary: Request password reset
      description: Send password reset email
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPasswordResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/reset-password:
    post:
      summary: Reset password
      description: Reset password with token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponse'
        '400':
          description: Invalid token or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile:
    get:
      summary: Get user profile
      description: Get current user profile
      tags:
        - User Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update user profile
      description: Update current user profile
      tags:
        - User Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/change-password:
    put:
      summary: Change password
      description: Change current user password
      tags:
        - User Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - first_name
        - last_name
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          description: User password (min 8 characters)
          example: "SecurePass123!"
        first_name:
          type: string
          minLength: 1
          description: User first name
          example: "John"
        last_name:
          type: string
          minLength: 1
          description: User last name
          example: "Doe"
        phone:
          type: string
          description: User phone number
          example: "+1234567890"

    RegisterResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              $ref: '#/components/schemas/Token'
        message:
          type: string
          example: "User registered successfully"
        errors:
          type: null
        meta:
          $ref: '#/components/schemas/Meta'

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        password:
          type: string
          description: User password
          example: "SecurePass123!"

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              $ref: '#/components/schemas/Token'
        message:
          type: string
          example: "Login successful"
        errors:
          type: null
        meta:
          $ref: '#/components/schemas/Meta'

    RefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: Refresh token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    RefreshResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/Token'
        message:
          type: string
          example: "Token refreshed successfully"
        errors:
          type: null
        meta:
          $ref: '#/components/schemas/Meta'

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"

    ForgotPasswordResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: null
        message:
          type: string
          example: "Password reset email sent"
        errors:
          type: null
        meta:
          $ref: '#/components/schemas/Meta'

    ResetPasswordRequest:
      type: object
      required:
        - token
        - password
      properties:
        token:
          type: string
          description: Password reset token
          example: "reset_token_123"
        password:
          type: string
          minLength: 8
          description: New password
          example: "NewSecurePass123!"

    ResetPasswordResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: null
        message:
          type: string
          example: "Password reset successful"
        errors:
          type: null
        meta:
          $ref: '#/components/schemas/Meta'

    UpdateProfileRequest:
      type: object
      properties:
        first_name:
          type: string
          description: User first name
          example: "John"
        last_name:
          type: string
          description: User last name
          example: "Doe"
        phone:
          type: string
          description: User phone number
          example: "+1234567890"

    ProfileResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/User'
        message:
          type: string
          example: "Profile retrieved successfully"
        errors:
          type: null
        meta:
          $ref: '#/components/schemas/Meta'

    ChangePasswordRequest:
      type: object
      required:
        - current_password
        - new_password
      properties:
        current_password:
          type: string
          description: Current password
          example: "CurrentPass123!"
        new_password:
          type: string
          minLength: 8
          description: New password
          example: "NewSecurePass123!"

    ChangePasswordResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: null
        message:
          type: string
          example: "Password changed successfully"
        errors:
          type: null
        meta:
          $ref: '#/components/schemas/Meta'

    LogoutResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: null
        message:
          type: string
          example: "Logout successful"
        errors:
          type: null
        meta:
          $ref: '#/components/schemas/Meta'

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        email:
          type: string
          format: email
          description: User email
          example: "user@example.com"
        first_name:
          type: string
          description: User first name
          example: "John"
        last_name:
          type: string
          description: User last name
          example: "Doe"
        phone:
          type: string
          description: User phone number
          example: "+1234567890"
        status:
          type: string
          enum: [active, inactive, suspended]
          description: User status
          example: "active"
        email_verified:
          type: boolean
          description: Email verification status
          example: true
        phone_verified:
          type: boolean
          description: Phone verification status
          example: false
        created_at:
          type: string
          format: date-time
          description: Account creation date
          example: "2024-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update date
          example: "2024-01-01T00:00:00Z"

    Token:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          description: JWT refresh token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 3600
        token_type:
          type: string
          description: Token type
          example: "Bearer"

    Meta:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Response timestamp
          example: "2024-01-01T00:00:00Z"
        version:
          type: string
          description: API version
          example: "1.0.0"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        data:
          type: null
        message:
          type: string
          description: Error message
          example: "Validation failed"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: Field name
                example: "email"
              message:
                type: string
                description: Error message
                example: "Invalid email format"
              code:
                type: string
                description: Error code
                example: "VALIDATION_ERROR"
        meta:
          $ref: '#/components/schemas/Meta'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
